/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::core::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::core::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::core::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::core::mem::transmute(self)
    }
}
impl<T> ::core::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::core::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::core::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::core::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::core::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::core::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::core::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::core::cmp::Eq for __BindgenUnionField<T> {}
pub const __NR_io_uring_setup: u32 = 425;
pub const __NR_io_uring_enter: u32 = 426;
pub const __NR_io_uring_register: u32 = 427;
pub const IORING_FILE_INDEX_ALLOC: i32 = -1;
pub const IORING_SETUP_IOPOLL: u32 = 1;
pub const IORING_SETUP_SQPOLL: u32 = 2;
pub const IORING_SETUP_SQ_AFF: u32 = 4;
pub const IORING_SETUP_CQSIZE: u32 = 8;
pub const IORING_SETUP_CLAMP: u32 = 16;
pub const IORING_SETUP_ATTACH_WQ: u32 = 32;
pub const IORING_SETUP_R_DISABLED: u32 = 64;
pub const IORING_SETUP_SUBMIT_ALL: u32 = 128;
pub const IORING_SETUP_COOP_TASKRUN: u32 = 256;
pub const IORING_SETUP_TASKRUN_FLAG: u32 = 512;
pub const IORING_SETUP_SQE128: u32 = 1024;
pub const IORING_SETUP_CQE32: u32 = 2048;
pub const IORING_FSYNC_DATASYNC: u32 = 1;
pub const IORING_TIMEOUT_ABS: u32 = 1;
pub const IORING_TIMEOUT_UPDATE: u32 = 2;
pub const IORING_TIMEOUT_BOOTTIME: u32 = 4;
pub const IORING_TIMEOUT_REALTIME: u32 = 8;
pub const IORING_LINK_TIMEOUT_UPDATE: u32 = 16;
pub const IORING_TIMEOUT_ETIME_SUCCESS: u32 = 32;
pub const IORING_TIMEOUT_CLOCK_MASK: u32 = 12;
pub const IORING_TIMEOUT_UPDATE_MASK: u32 = 18;
pub const SPLICE_F_FD_IN_FIXED: u32 = 2147483648;
pub const IORING_POLL_ADD_MULTI: u32 = 1;
pub const IORING_POLL_UPDATE_EVENTS: u32 = 2;
pub const IORING_POLL_UPDATE_USER_DATA: u32 = 4;
pub const IORING_ASYNC_CANCEL_ALL: u32 = 1;
pub const IORING_ASYNC_CANCEL_FD: u32 = 2;
pub const IORING_ASYNC_CANCEL_ANY: u32 = 4;
pub const IORING_RECVSEND_POLL_FIRST: u32 = 1;
pub const IORING_ACCEPT_MULTISHOT: u32 = 1;
pub const IORING_CQE_F_BUFFER: u32 = 1;
pub const IORING_CQE_F_MORE: u32 = 2;
pub const IORING_CQE_F_SOCK_NONEMPTY: u32 = 4;
pub const IORING_OFF_SQ_RING: u32 = 0;
pub const IORING_OFF_CQ_RING: u32 = 134217728;
pub const IORING_OFF_SQES: u32 = 268435456;
pub const IORING_SQ_NEED_WAKEUP: u32 = 1;
pub const IORING_SQ_CQ_OVERFLOW: u32 = 2;
pub const IORING_SQ_TASKRUN: u32 = 4;
pub const IORING_CQ_EVENTFD_DISABLED: u32 = 1;
pub const IORING_ENTER_GETEVENTS: u32 = 1;
pub const IORING_ENTER_SQ_WAKEUP: u32 = 2;
pub const IORING_ENTER_SQ_WAIT: u32 = 4;
pub const IORING_ENTER_EXT_ARG: u32 = 8;
pub const IORING_ENTER_REGISTERED_RING: u32 = 16;
pub const IORING_FEAT_SINGLE_MMAP: u32 = 1;
pub const IORING_FEAT_NODROP: u32 = 2;
pub const IORING_FEAT_SUBMIT_STABLE: u32 = 4;
pub const IORING_FEAT_RW_CUR_POS: u32 = 8;
pub const IORING_FEAT_CUR_PERSONALITY: u32 = 16;
pub const IORING_FEAT_FAST_POLL: u32 = 32;
pub const IORING_FEAT_POLL_32BITS: u32 = 64;
pub const IORING_FEAT_SQPOLL_NONFIXED: u32 = 128;
pub const IORING_FEAT_EXT_ARG: u32 = 256;
pub const IORING_FEAT_NATIVE_WORKERS: u32 = 512;
pub const IORING_FEAT_RSRC_TAGS: u32 = 1024;
pub const IORING_FEAT_CQE_SKIP: u32 = 2048;
pub const IORING_FEAT_LINKED_FILE: u32 = 4096;
pub const IORING_RSRC_REGISTER_SPARSE: u32 = 1;
pub const IORING_REGISTER_FILES_SKIP: i32 = -2;
pub const IO_URING_OP_SUPPORTED: u32 = 1;
pub type __u8 = libc::c_uchar;
pub type __u16 = libc::c_ushort;
pub type __s32 = libc::c_int;
pub type __u32 = libc::c_uint;
pub type __u64 = libc::c_ulonglong;
pub type __kernel_time64_t = libc::c_longlong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_timespec {
    pub tv_sec: __kernel_time64_t,
    pub tv_nsec: libc::c_longlong,
}
#[test]
fn bindgen_test_layout___kernel_timespec() {
    assert_eq!(
        ::core::mem::size_of::<__kernel_timespec>(),
        16usize,
        concat!("Size of: ", stringify!(__kernel_timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<__kernel_timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_timespec))
    );
    fn test_field_tv_sec() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<__kernel_timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__kernel_timespec),
                "::",
                stringify!(tv_sec)
            )
        );
    }
    test_field_tv_sec();
    fn test_field_tv_nsec() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<__kernel_timespec>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__kernel_timespec),
                "::",
                stringify!(tv_nsec)
            )
        );
    }
    test_field_tv_nsec();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct open_how {
    pub flags: __u64,
    pub mode: __u64,
    pub resolve: __u64,
}
#[test]
fn bindgen_test_layout_open_how() {
    assert_eq!(
        ::core::mem::size_of::<open_how>(),
        24usize,
        concat!("Size of: ", stringify!(open_how))
    );
    assert_eq!(
        ::core::mem::align_of::<open_how>(),
        8usize,
        concat!("Alignment of ", stringify!(open_how))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<open_how>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(open_how),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<open_how>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).mode) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(open_how),
                "::",
                stringify!(mode)
            )
        );
    }
    test_field_mode();
    fn test_field_resolve() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<open_how>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resolve) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(open_how),
                "::",
                stringify!(resolve)
            )
        );
    }
    test_field_resolve();
}
pub type __kernel_rwf_t = libc::c_int;
#[repr(C)]
pub struct io_uring_sqe {
    pub opcode: __u8,
    pub flags: __u8,
    pub ioprio: __u16,
    pub fd: __s32,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1,
    pub __bindgen_anon_2: io_uring_sqe__bindgen_ty_2,
    pub len: __u32,
    pub __bindgen_anon_3: io_uring_sqe__bindgen_ty_3,
    pub user_data: __u64,
    pub __bindgen_anon_4: io_uring_sqe__bindgen_ty_4,
    pub personality: __u16,
    pub __bindgen_anon_5: io_uring_sqe__bindgen_ty_5,
    pub __bindgen_anon_6: io_uring_sqe__bindgen_ty_6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_1 {
    pub off: __u64,
    pub addr2: __u64,
    pub __bindgen_anon_1: io_uring_sqe__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_1__bindgen_ty_1 {
    pub cmd_op: __u32,
    pub __pad1: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_sqe__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(io_uring_sqe__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_sqe__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_sqe__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_cmd_op() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).cmd_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(cmd_op)
            )
        );
    }
    test_field_cmd_op();
    fn test_field___pad1() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__pad1)
            )
        );
    }
    test_field___pad1();
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_sqe__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_sqe__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_1))
    );
    fn test_field_off() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).off) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_1),
                "::",
                stringify!(off)
            )
        );
    }
    test_field_off();
    fn test_field_addr2() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).addr2) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_1),
                "::",
                stringify!(addr2)
            )
        );
    }
    test_field_addr2();
}
impl Default for io_uring_sqe__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_2 {
    pub addr: __u64,
    pub splice_off_in: __u64,
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_sqe__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_sqe__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_2))
    );
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_2),
                "::",
                stringify!(addr)
            )
        );
    }
    test_field_addr();
    fn test_field_splice_off_in() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).splice_off_in) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_2),
                "::",
                stringify!(splice_off_in)
            )
        );
    }
    test_field_splice_off_in();
}
impl Default for io_uring_sqe__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_3 {
    pub rw_flags: __kernel_rwf_t,
    pub fsync_flags: __u32,
    pub poll_events: __u16,
    pub poll32_events: __u32,
    pub sync_range_flags: __u32,
    pub msg_flags: __u32,
    pub timeout_flags: __u32,
    pub accept_flags: __u32,
    pub cancel_flags: __u32,
    pub open_flags: __u32,
    pub statx_flags: __u32,
    pub fadvise_advice: __u32,
    pub splice_flags: __u32,
    pub rename_flags: __u32,
    pub unlink_flags: __u32,
    pub hardlink_flags: __u32,
    pub xattr_flags: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_3() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_sqe__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_3))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_sqe__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_3))
    );
    fn test_field_rw_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).rw_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(rw_flags)
            )
        );
    }
    test_field_rw_flags();
    fn test_field_fsync_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).fsync_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(fsync_flags)
            )
        );
    }
    test_field_fsync_flags();
    fn test_field_poll_events() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).poll_events) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(poll_events)
            )
        );
    }
    test_field_poll_events();
    fn test_field_poll32_events() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).poll32_events) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(poll32_events)
            )
        );
    }
    test_field_poll32_events();
    fn test_field_sync_range_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).sync_range_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(sync_range_flags)
            )
        );
    }
    test_field_sync_range_flags();
    fn test_field_msg_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(msg_flags)
            )
        );
    }
    test_field_msg_flags();
    fn test_field_timeout_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).timeout_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(timeout_flags)
            )
        );
    }
    test_field_timeout_flags();
    fn test_field_accept_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).accept_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(accept_flags)
            )
        );
    }
    test_field_accept_flags();
    fn test_field_cancel_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).cancel_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(cancel_flags)
            )
        );
    }
    test_field_cancel_flags();
    fn test_field_open_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).open_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(open_flags)
            )
        );
    }
    test_field_open_flags();
    fn test_field_statx_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).statx_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(statx_flags)
            )
        );
    }
    test_field_statx_flags();
    fn test_field_fadvise_advice() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).fadvise_advice) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(fadvise_advice)
            )
        );
    }
    test_field_fadvise_advice();
    fn test_field_splice_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).splice_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(splice_flags)
            )
        );
    }
    test_field_splice_flags();
    fn test_field_rename_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).rename_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(rename_flags)
            )
        );
    }
    test_field_rename_flags();
    fn test_field_unlink_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).unlink_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(unlink_flags)
            )
        );
    }
    test_field_unlink_flags();
    fn test_field_hardlink_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).hardlink_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(hardlink_flags)
            )
        );
    }
    test_field_hardlink_flags();
    fn test_field_xattr_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).xattr_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_3),
                "::",
                stringify!(xattr_flags)
            )
        );
    }
    test_field_xattr_flags();
}
impl Default for io_uring_sqe__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_4 {
    pub buf_index: __u16,
    pub buf_group: __u16,
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_4() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_sqe__bindgen_ty_4>(),
        2usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_4))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_sqe__bindgen_ty_4>(),
        1usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_4))
    );
    fn test_field_buf_index() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).buf_index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_4),
                "::",
                stringify!(buf_index)
            )
        );
    }
    test_field_buf_index();
    fn test_field_buf_group() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).buf_group) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_4),
                "::",
                stringify!(buf_group)
            )
        );
    }
    test_field_buf_group();
}
impl Default for io_uring_sqe__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_sqe__bindgen_ty_5 {
    pub splice_fd_in: __s32,
    pub file_index: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_5() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_sqe__bindgen_ty_5>(),
        4usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_5))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_sqe__bindgen_ty_5>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_5))
    );
    fn test_field_splice_fd_in() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).splice_fd_in) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_5),
                "::",
                stringify!(splice_fd_in)
            )
        );
    }
    test_field_splice_fd_in();
    fn test_field_file_index() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).file_index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_5),
                "::",
                stringify!(file_index)
            )
        );
    }
    test_field_file_index();
}
impl Default for io_uring_sqe__bindgen_ty_5 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct io_uring_sqe__bindgen_ty_6 {
    pub __bindgen_anon_1: __BindgenUnionField<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>,
    pub cmd: __BindgenUnionField<[__u8; 0usize]>,
    pub bindgen_union_field: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_sqe__bindgen_ty_6__bindgen_ty_1 {
    pub addr3: __u64,
    pub __pad2: [__u64; 1usize],
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_6__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_uring_sqe__bindgen_ty_6__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_sqe__bindgen_ty_6__bindgen_ty_1)
        )
    );
    fn test_field_addr3() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).addr3) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_6__bindgen_ty_1),
                "::",
                stringify!(addr3)
            )
        );
    }
    test_field_addr3();
    fn test_field___pad2() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_6__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_6__bindgen_ty_1),
                "::",
                stringify!(__pad2)
            )
        );
    }
    test_field___pad2();
}
#[test]
fn bindgen_test_layout_io_uring_sqe__bindgen_ty_6() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_sqe__bindgen_ty_6>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_sqe__bindgen_ty_6))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_sqe__bindgen_ty_6>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_sqe__bindgen_ty_6))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe__bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe__bindgen_ty_6),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
}
impl Default for io_uring_sqe__bindgen_ty_6 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_io_uring_sqe() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_sqe>(),
        64usize,
        concat!("Size of: ", stringify!(io_uring_sqe))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_sqe>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_sqe))
    );
    fn test_field_opcode() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe),
                "::",
                stringify!(opcode)
            )
        );
    }
    test_field_opcode();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_ioprio() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ioprio) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe),
                "::",
                stringify!(ioprio)
            )
        );
    }
    test_field_ioprio();
    fn test_field_fd() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).fd) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe),
                "::",
                stringify!(fd)
            )
        );
    }
    test_field_fd();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_user_data() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe),
                "::",
                stringify!(user_data)
            )
        );
    }
    test_field_user_data();
    fn test_field_personality() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_sqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).personality) as usize - ptr as usize
            },
            42usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_sqe),
                "::",
                stringify!(personality)
            )
        );
    }
    test_field_personality();
}
impl Default for io_uring_sqe {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IOSQE_FIXED_FILE_BIT: _bindgen_ty_4 = 0;
pub const IOSQE_IO_DRAIN_BIT: _bindgen_ty_4 = 1;
pub const IOSQE_IO_LINK_BIT: _bindgen_ty_4 = 2;
pub const IOSQE_IO_HARDLINK_BIT: _bindgen_ty_4 = 3;
pub const IOSQE_ASYNC_BIT: _bindgen_ty_4 = 4;
pub const IOSQE_BUFFER_SELECT_BIT: _bindgen_ty_4 = 5;
pub const IOSQE_CQE_SKIP_SUCCESS_BIT: _bindgen_ty_4 = 6;
pub type _bindgen_ty_4 = libc::c_uint;
pub const IORING_OP_NOP: io_uring_op = 0;
pub const IORING_OP_READV: io_uring_op = 1;
pub const IORING_OP_WRITEV: io_uring_op = 2;
pub const IORING_OP_FSYNC: io_uring_op = 3;
pub const IORING_OP_READ_FIXED: io_uring_op = 4;
pub const IORING_OP_WRITE_FIXED: io_uring_op = 5;
pub const IORING_OP_POLL_ADD: io_uring_op = 6;
pub const IORING_OP_POLL_REMOVE: io_uring_op = 7;
pub const IORING_OP_SYNC_FILE_RANGE: io_uring_op = 8;
pub const IORING_OP_SENDMSG: io_uring_op = 9;
pub const IORING_OP_RECVMSG: io_uring_op = 10;
pub const IORING_OP_TIMEOUT: io_uring_op = 11;
pub const IORING_OP_TIMEOUT_REMOVE: io_uring_op = 12;
pub const IORING_OP_ACCEPT: io_uring_op = 13;
pub const IORING_OP_ASYNC_CANCEL: io_uring_op = 14;
pub const IORING_OP_LINK_TIMEOUT: io_uring_op = 15;
pub const IORING_OP_CONNECT: io_uring_op = 16;
pub const IORING_OP_FALLOCATE: io_uring_op = 17;
pub const IORING_OP_OPENAT: io_uring_op = 18;
pub const IORING_OP_CLOSE: io_uring_op = 19;
pub const IORING_OP_FILES_UPDATE: io_uring_op = 20;
pub const IORING_OP_STATX: io_uring_op = 21;
pub const IORING_OP_READ: io_uring_op = 22;
pub const IORING_OP_WRITE: io_uring_op = 23;
pub const IORING_OP_FADVISE: io_uring_op = 24;
pub const IORING_OP_MADVISE: io_uring_op = 25;
pub const IORING_OP_SEND: io_uring_op = 26;
pub const IORING_OP_RECV: io_uring_op = 27;
pub const IORING_OP_OPENAT2: io_uring_op = 28;
pub const IORING_OP_EPOLL_CTL: io_uring_op = 29;
pub const IORING_OP_SPLICE: io_uring_op = 30;
pub const IORING_OP_PROVIDE_BUFFERS: io_uring_op = 31;
pub const IORING_OP_REMOVE_BUFFERS: io_uring_op = 32;
pub const IORING_OP_TEE: io_uring_op = 33;
pub const IORING_OP_SHUTDOWN: io_uring_op = 34;
pub const IORING_OP_RENAMEAT: io_uring_op = 35;
pub const IORING_OP_UNLINKAT: io_uring_op = 36;
pub const IORING_OP_MKDIRAT: io_uring_op = 37;
pub const IORING_OP_SYMLINKAT: io_uring_op = 38;
pub const IORING_OP_LINKAT: io_uring_op = 39;
pub const IORING_OP_MSG_RING: io_uring_op = 40;
pub const IORING_OP_FSETXATTR: io_uring_op = 41;
pub const IORING_OP_SETXATTR: io_uring_op = 42;
pub const IORING_OP_FGETXATTR: io_uring_op = 43;
pub const IORING_OP_GETXATTR: io_uring_op = 44;
pub const IORING_OP_SOCKET: io_uring_op = 45;
pub const IORING_OP_URING_CMD: io_uring_op = 46;
pub const IORING_OP_LAST: io_uring_op = 47;
pub type io_uring_op = libc::c_uint;
#[repr(C)]
#[derive(Debug, Default)]
pub struct io_uring_cqe {
    pub user_data: __u64,
    pub res: __s32,
    pub flags: __u32,
    pub big_cqe: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_io_uring_cqe() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_cqe>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_cqe))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_cqe>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_cqe))
    );
    fn test_field_user_data() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_cqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_cqe),
                "::",
                stringify!(user_data)
            )
        );
    }
    test_field_user_data();
    fn test_field_res() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_cqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).res) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_cqe),
                "::",
                stringify!(res)
            )
        );
    }
    test_field_res();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_cqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_cqe),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_big_cqe() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_cqe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).big_cqe) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_cqe),
                "::",
                stringify!(big_cqe)
            )
        );
    }
    test_field_big_cqe();
}
pub const IORING_CQE_BUFFER_SHIFT: _bindgen_ty_5 = 16;
pub type _bindgen_ty_5 = libc::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_sqring_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub ring_mask: __u32,
    pub ring_entries: __u32,
    pub flags: __u32,
    pub dropped: __u32,
    pub array: __u32,
    pub resv1: __u32,
    pub resv2: __u64,
}
#[test]
fn bindgen_test_layout_io_sqring_offsets() {
    assert_eq!(
        ::core::mem::size_of::<io_sqring_offsets>(),
        40usize,
        concat!("Size of: ", stringify!(io_sqring_offsets))
    );
    assert_eq!(
        ::core::mem::align_of::<io_sqring_offsets>(),
        8usize,
        concat!("Alignment of ", stringify!(io_sqring_offsets))
    );
    fn test_field_head() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_sqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).head) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_sqring_offsets),
                "::",
                stringify!(head)
            )
        );
    }
    test_field_head();
    fn test_field_tail() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_sqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).tail) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_sqring_offsets),
                "::",
                stringify!(tail)
            )
        );
    }
    test_field_tail();
    fn test_field_ring_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_sqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ring_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_sqring_offsets),
                "::",
                stringify!(ring_mask)
            )
        );
    }
    test_field_ring_mask();
    fn test_field_ring_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_sqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ring_entries) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(io_sqring_offsets),
                "::",
                stringify!(ring_entries)
            )
        );
    }
    test_field_ring_entries();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_sqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(io_sqring_offsets),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_dropped() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_sqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).dropped) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(io_sqring_offsets),
                "::",
                stringify!(dropped)
            )
        );
    }
    test_field_dropped();
    fn test_field_array() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_sqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).array) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(io_sqring_offsets),
                "::",
                stringify!(array)
            )
        );
    }
    test_field_array();
    fn test_field_resv1() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_sqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv1) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(io_sqring_offsets),
                "::",
                stringify!(resv1)
            )
        );
    }
    test_field_resv1();
    fn test_field_resv2() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_sqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(io_sqring_offsets),
                "::",
                stringify!(resv2)
            )
        );
    }
    test_field_resv2();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_cqring_offsets {
    pub head: __u32,
    pub tail: __u32,
    pub ring_mask: __u32,
    pub ring_entries: __u32,
    pub overflow: __u32,
    pub cqes: __u32,
    pub flags: __u32,
    pub resv1: __u32,
    pub resv2: __u64,
}
#[test]
fn bindgen_test_layout_io_cqring_offsets() {
    assert_eq!(
        ::core::mem::size_of::<io_cqring_offsets>(),
        40usize,
        concat!("Size of: ", stringify!(io_cqring_offsets))
    );
    assert_eq!(
        ::core::mem::align_of::<io_cqring_offsets>(),
        8usize,
        concat!("Alignment of ", stringify!(io_cqring_offsets))
    );
    fn test_field_head() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_cqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).head) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_cqring_offsets),
                "::",
                stringify!(head)
            )
        );
    }
    test_field_head();
    fn test_field_tail() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_cqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).tail) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_cqring_offsets),
                "::",
                stringify!(tail)
            )
        );
    }
    test_field_tail();
    fn test_field_ring_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_cqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ring_mask) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_cqring_offsets),
                "::",
                stringify!(ring_mask)
            )
        );
    }
    test_field_ring_mask();
    fn test_field_ring_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_cqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ring_entries) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(io_cqring_offsets),
                "::",
                stringify!(ring_entries)
            )
        );
    }
    test_field_ring_entries();
    fn test_field_overflow() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_cqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).overflow) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(io_cqring_offsets),
                "::",
                stringify!(overflow)
            )
        );
    }
    test_field_overflow();
    fn test_field_cqes() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_cqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).cqes) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(io_cqring_offsets),
                "::",
                stringify!(cqes)
            )
        );
    }
    test_field_cqes();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_cqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(io_cqring_offsets),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_resv1() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_cqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv1) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(io_cqring_offsets),
                "::",
                stringify!(resv1)
            )
        );
    }
    test_field_resv1();
    fn test_field_resv2() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_cqring_offsets>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(io_cqring_offsets),
                "::",
                stringify!(resv2)
            )
        );
    }
    test_field_resv2();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_params {
    pub sq_entries: __u32,
    pub cq_entries: __u32,
    pub flags: __u32,
    pub sq_thread_cpu: __u32,
    pub sq_thread_idle: __u32,
    pub features: __u32,
    pub wq_fd: __u32,
    pub resv: [__u32; 3usize],
    pub sq_off: io_sqring_offsets,
    pub cq_off: io_cqring_offsets,
}
#[test]
fn bindgen_test_layout_io_uring_params() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_params>(),
        120usize,
        concat!("Size of: ", stringify!(io_uring_params))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_params>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_params))
    );
    fn test_field_sq_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_params>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).sq_entries) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_params),
                "::",
                stringify!(sq_entries)
            )
        );
    }
    test_field_sq_entries();
    fn test_field_cq_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_params>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).cq_entries) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_params),
                "::",
                stringify!(cq_entries)
            )
        );
    }
    test_field_cq_entries();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_params>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_params),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_sq_thread_cpu() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_params>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).sq_thread_cpu) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_params),
                "::",
                stringify!(sq_thread_cpu)
            )
        );
    }
    test_field_sq_thread_cpu();
    fn test_field_sq_thread_idle() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_params>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).sq_thread_idle) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_params),
                "::",
                stringify!(sq_thread_idle)
            )
        );
    }
    test_field_sq_thread_idle();
    fn test_field_features() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_params>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).features) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_params),
                "::",
                stringify!(features)
            )
        );
    }
    test_field_features();
    fn test_field_wq_fd() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_params>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).wq_fd) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_params),
                "::",
                stringify!(wq_fd)
            )
        );
    }
    test_field_wq_fd();
    fn test_field_resv() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_params>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_params),
                "::",
                stringify!(resv)
            )
        );
    }
    test_field_resv();
    fn test_field_sq_off() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_params>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).sq_off) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_params),
                "::",
                stringify!(sq_off)
            )
        );
    }
    test_field_sq_off();
    fn test_field_cq_off() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_params>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).cq_off) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_params),
                "::",
                stringify!(cq_off)
            )
        );
    }
    test_field_cq_off();
}
pub const IORING_REGISTER_BUFFERS: _bindgen_ty_6 = 0;
pub const IORING_UNREGISTER_BUFFERS: _bindgen_ty_6 = 1;
pub const IORING_REGISTER_FILES: _bindgen_ty_6 = 2;
pub const IORING_UNREGISTER_FILES: _bindgen_ty_6 = 3;
pub const IORING_REGISTER_EVENTFD: _bindgen_ty_6 = 4;
pub const IORING_UNREGISTER_EVENTFD: _bindgen_ty_6 = 5;
pub const IORING_REGISTER_FILES_UPDATE: _bindgen_ty_6 = 6;
pub const IORING_REGISTER_EVENTFD_ASYNC: _bindgen_ty_6 = 7;
pub const IORING_REGISTER_PROBE: _bindgen_ty_6 = 8;
pub const IORING_REGISTER_PERSONALITY: _bindgen_ty_6 = 9;
pub const IORING_UNREGISTER_PERSONALITY: _bindgen_ty_6 = 10;
pub const IORING_REGISTER_RESTRICTIONS: _bindgen_ty_6 = 11;
pub const IORING_REGISTER_ENABLE_RINGS: _bindgen_ty_6 = 12;
pub const IORING_REGISTER_FILES2: _bindgen_ty_6 = 13;
pub const IORING_REGISTER_FILES_UPDATE2: _bindgen_ty_6 = 14;
pub const IORING_REGISTER_BUFFERS2: _bindgen_ty_6 = 15;
pub const IORING_REGISTER_BUFFERS_UPDATE: _bindgen_ty_6 = 16;
pub const IORING_REGISTER_IOWQ_AFF: _bindgen_ty_6 = 17;
pub const IORING_UNREGISTER_IOWQ_AFF: _bindgen_ty_6 = 18;
pub const IORING_REGISTER_IOWQ_MAX_WORKERS: _bindgen_ty_6 = 19;
pub const IORING_REGISTER_RING_FDS: _bindgen_ty_6 = 20;
pub const IORING_UNREGISTER_RING_FDS: _bindgen_ty_6 = 21;
pub const IORING_REGISTER_PBUF_RING: _bindgen_ty_6 = 22;
pub const IORING_UNREGISTER_PBUF_RING: _bindgen_ty_6 = 23;
pub const IORING_REGISTER_LAST: _bindgen_ty_6 = 24;
pub type _bindgen_ty_6 = libc::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_files_update {
    pub offset: __u32,
    pub resv: __u32,
    pub fds: __u64,
}
#[test]
fn bindgen_test_layout_io_uring_files_update() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_files_update>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_files_update))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_files_update>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_files_update))
    );
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_files_update>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_files_update),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_resv() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_files_update>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_files_update),
                "::",
                stringify!(resv)
            )
        );
    }
    test_field_resv();
    fn test_field_fds() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_files_update>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).fds) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_files_update),
                "::",
                stringify!(fds)
            )
        );
    }
    test_field_fds();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_rsrc_register {
    pub nr: __u32,
    pub flags: __u32,
    pub resv2: __u64,
    pub data: __u64,
    pub tags: __u64,
}
#[test]
fn bindgen_test_layout_io_uring_rsrc_register() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_rsrc_register>(),
        32usize,
        concat!("Size of: ", stringify!(io_uring_rsrc_register))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_rsrc_register>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_rsrc_register))
    );
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_register>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_register),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_register>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_register),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_resv2() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_register>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_register),
                "::",
                stringify!(resv2)
            )
        );
    }
    test_field_resv2();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_register>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_register),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_tags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_register>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).tags) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_register),
                "::",
                stringify!(tags)
            )
        );
    }
    test_field_tags();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_rsrc_update {
    pub offset: __u32,
    pub resv: __u32,
    pub data: __u64,
}
#[test]
fn bindgen_test_layout_io_uring_rsrc_update() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_rsrc_update>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_rsrc_update))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_rsrc_update>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_rsrc_update))
    );
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_update>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_update),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_resv() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_update>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_update),
                "::",
                stringify!(resv)
            )
        );
    }
    test_field_resv();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_update>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_update),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_rsrc_update2 {
    pub offset: __u32,
    pub resv: __u32,
    pub data: __u64,
    pub tags: __u64,
    pub nr: __u32,
    pub resv2: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_rsrc_update2() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_rsrc_update2>(),
        32usize,
        concat!("Size of: ", stringify!(io_uring_rsrc_update2))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_rsrc_update2>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_rsrc_update2))
    );
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_update2>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_update2),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_resv() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_update2>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_update2),
                "::",
                stringify!(resv)
            )
        );
    }
    test_field_resv();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_update2>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_update2),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_tags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_update2>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).tags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_update2),
                "::",
                stringify!(tags)
            )
        );
    }
    test_field_tags();
    fn test_field_nr() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_update2>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).nr) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_update2),
                "::",
                stringify!(nr)
            )
        );
    }
    test_field_nr();
    fn test_field_resv2() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_rsrc_update2>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_rsrc_update2),
                "::",
                stringify!(resv2)
            )
        );
    }
    test_field_resv2();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_probe_op {
    pub op: __u8,
    pub resv: __u8,
    pub flags: __u16,
    pub resv2: __u32,
}
#[test]
fn bindgen_test_layout_io_uring_probe_op() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_probe_op>(),
        8usize,
        concat!("Size of: ", stringify!(io_uring_probe_op))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_probe_op>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_probe_op))
    );
    fn test_field_op() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_probe_op>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_probe_op),
                "::",
                stringify!(op)
            )
        );
    }
    test_field_op();
    fn test_field_resv() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_probe_op>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_probe_op),
                "::",
                stringify!(resv)
            )
        );
    }
    test_field_resv();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_probe_op>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_probe_op),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_resv2() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_probe_op>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_probe_op),
                "::",
                stringify!(resv2)
            )
        );
    }
    test_field_resv2();
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct io_uring_probe {
    pub last_op: __u8,
    pub ops_len: __u8,
    pub resv: __u16,
    pub resv2: [__u32; 3usize],
    pub ops: __IncompleteArrayField<io_uring_probe_op>,
}
#[test]
fn bindgen_test_layout_io_uring_probe() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_probe>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_probe))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_probe>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_probe))
    );
    fn test_field_last_op() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).last_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_probe),
                "::",
                stringify!(last_op)
            )
        );
    }
    test_field_last_op();
    fn test_field_ops_len() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ops_len) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_probe),
                "::",
                stringify!(ops_len)
            )
        );
    }
    test_field_ops_len();
    fn test_field_resv() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_probe),
                "::",
                stringify!(resv)
            )
        );
    }
    test_field_resv();
    fn test_field_resv2() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_probe),
                "::",
                stringify!(resv2)
            )
        );
    }
    test_field_resv2();
    fn test_field_ops() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_probe>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ops) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_probe),
                "::",
                stringify!(ops)
            )
        );
    }
    test_field_ops();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct io_uring_restriction {
    pub opcode: __u16,
    pub __bindgen_anon_1: io_uring_restriction__bindgen_ty_1,
    pub resv: __u8,
    pub resv2: [__u32; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union io_uring_restriction__bindgen_ty_1 {
    pub register_op: __u8,
    pub sqe_op: __u8,
    pub sqe_flags: __u8,
}
#[test]
fn bindgen_test_layout_io_uring_restriction__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_restriction__bindgen_ty_1>(),
        1usize,
        concat!("Size of: ", stringify!(io_uring_restriction__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_restriction__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_restriction__bindgen_ty_1)
        )
    );
    fn test_field_register_op() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::core::mem::MaybeUninit::<io_uring_restriction__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).register_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_restriction__bindgen_ty_1),
                "::",
                stringify!(register_op)
            )
        );
    }
    test_field_register_op();
    fn test_field_sqe_op() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::core::mem::MaybeUninit::<io_uring_restriction__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).sqe_op) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_restriction__bindgen_ty_1),
                "::",
                stringify!(sqe_op)
            )
        );
    }
    test_field_sqe_op();
    fn test_field_sqe_flags() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::core::mem::MaybeUninit::<io_uring_restriction__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).sqe_flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_restriction__bindgen_ty_1),
                "::",
                stringify!(sqe_flags)
            )
        );
    }
    test_field_sqe_flags();
}
impl Default for io_uring_restriction__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_io_uring_restriction() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_restriction>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_restriction))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_restriction>(),
        4usize,
        concat!("Alignment of ", stringify!(io_uring_restriction))
    );
    fn test_field_opcode() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_restriction>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_restriction),
                "::",
                stringify!(opcode)
            )
        );
    }
    test_field_opcode();
    fn test_field_resv() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_restriction>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_restriction),
                "::",
                stringify!(resv)
            )
        );
    }
    test_field_resv();
    fn test_field_resv2() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_restriction>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_restriction),
                "::",
                stringify!(resv2)
            )
        );
    }
    test_field_resv2();
}
impl Default for io_uring_restriction {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_buf {
    pub addr: __u64,
    pub len: __u32,
    pub bid: __u16,
    pub resv: __u16,
}
#[test]
fn bindgen_test_layout_io_uring_buf() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_buf>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_buf))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_buf))
    );
    fn test_field_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_buf>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf),
                "::",
                stringify!(addr)
            )
        );
    }
    test_field_addr();
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_buf>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_bid() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_buf>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).bid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf),
                "::",
                stringify!(bid)
            )
        );
    }
    test_field_bid();
    fn test_field_resv() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_buf>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf),
                "::",
                stringify!(resv)
            )
        );
    }
    test_field_resv();
}
#[repr(C)]
pub struct io_uring_buf_ring {
    pub __bindgen_anon_1: io_uring_buf_ring__bindgen_ty_1,
}
#[repr(C)]
pub struct io_uring_buf_ring__bindgen_ty_1 {
    pub __bindgen_anon_1: __BindgenUnionField<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1>,
    pub bufs: __BindgenUnionField<[io_uring_buf; 0usize]>,
    pub bindgen_union_field: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1 {
    pub resv1: __u64,
    pub resv2: __u32,
    pub resv3: __u16,
    pub tail: __u16,
}
#[test]
fn bindgen_test_layout_io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_resv1() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<
                    io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv1) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(resv1)
            )
        );
    }
    test_field_resv1();
    fn test_field_resv2() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<
                    io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv2) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(resv2)
            )
        );
    }
    test_field_resv2();
    fn test_field_resv3() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<
                    io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv3) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(resv3)
            )
        );
    }
    test_field_resv3();
    fn test_field_tail() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<
                    io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).tail) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf_ring__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(tail)
            )
        );
    }
    test_field_tail();
}
#[test]
fn bindgen_test_layout_io_uring_buf_ring__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_buf_ring__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_buf_ring__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_buf_ring__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_buf_ring__bindgen_ty_1))
    );
    fn test_field_bufs() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_buf_ring__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).bufs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf_ring__bindgen_ty_1),
                "::",
                stringify!(bufs)
            )
        );
    }
    test_field_bufs();
}
impl Default for io_uring_buf_ring__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_io_uring_buf_ring() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_buf_ring>(),
        16usize,
        concat!("Size of: ", stringify!(io_uring_buf_ring))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_buf_ring>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_buf_ring))
    );
}
impl Default for io_uring_buf_ring {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_buf_reg {
    pub ring_addr: __u64,
    pub ring_entries: __u32,
    pub bgid: __u16,
    pub pad: __u16,
    pub resv: [__u64; 3usize],
}
#[test]
fn bindgen_test_layout_io_uring_buf_reg() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_buf_reg>(),
        40usize,
        concat!("Size of: ", stringify!(io_uring_buf_reg))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_buf_reg>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_buf_reg))
    );
    fn test_field_ring_addr() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_buf_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ring_addr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf_reg),
                "::",
                stringify!(ring_addr)
            )
        );
    }
    test_field_ring_addr();
    fn test_field_ring_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_buf_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ring_entries) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf_reg),
                "::",
                stringify!(ring_entries)
            )
        );
    }
    test_field_ring_entries();
    fn test_field_bgid() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_buf_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).bgid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf_reg),
                "::",
                stringify!(bgid)
            )
        );
    }
    test_field_bgid();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_buf_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf_reg),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_resv() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_buf_reg>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).resv) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_buf_reg),
                "::",
                stringify!(resv)
            )
        );
    }
    test_field_resv();
}
pub const IORING_RESTRICTION_REGISTER_OP: _bindgen_ty_8 = 0;
pub const IORING_RESTRICTION_SQE_OP: _bindgen_ty_8 = 1;
pub const IORING_RESTRICTION_SQE_FLAGS_ALLOWED: _bindgen_ty_8 = 2;
pub const IORING_RESTRICTION_SQE_FLAGS_REQUIRED: _bindgen_ty_8 = 3;
pub const IORING_RESTRICTION_LAST: _bindgen_ty_8 = 4;
pub type _bindgen_ty_8 = libc::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct io_uring_getevents_arg {
    pub sigmask: __u64,
    pub sigmask_sz: __u32,
    pub pad: __u32,
    pub ts: __u64,
}
#[test]
fn bindgen_test_layout_io_uring_getevents_arg() {
    assert_eq!(
        ::core::mem::size_of::<io_uring_getevents_arg>(),
        24usize,
        concat!("Size of: ", stringify!(io_uring_getevents_arg))
    );
    assert_eq!(
        ::core::mem::align_of::<io_uring_getevents_arg>(),
        8usize,
        concat!("Alignment of ", stringify!(io_uring_getevents_arg))
    );
    fn test_field_sigmask() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_getevents_arg>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).sigmask) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_getevents_arg),
                "::",
                stringify!(sigmask)
            )
        );
    }
    test_field_sigmask();
    fn test_field_sigmask_sz() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_getevents_arg>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).sigmask_sz) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_getevents_arg),
                "::",
                stringify!(sigmask_sz)
            )
        );
    }
    test_field_sigmask_sz();
    fn test_field_pad() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_getevents_arg>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).pad) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_getevents_arg),
                "::",
                stringify!(pad)
            )
        );
    }
    test_field_pad();
    fn test_field_ts() {
        assert_eq!(
            unsafe {
                let uninit = ::core::mem::MaybeUninit::<io_uring_getevents_arg>::uninit();
                let ptr = uninit.as_ptr();
                ::core::ptr::addr_of!((*ptr).ts) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(io_uring_getevents_arg),
                "::",
                stringify!(ts)
            )
        );
    }
    test_field_ts();
}
